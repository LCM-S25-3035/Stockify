# -*- coding: utf-8 -*-
"""Stockify_UI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1if1wHSfO_l-F0OChIz1GA-x29fa6QFo3
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from meta_agent import get_agent_portfolio, ppo_stock, env_stock, ppo_crypto, env_crypto, ppo_etf, env_etf, \
                       tickers_stock, tickers_crypto, tickers_etf, mu_all, cov_all, MetaPortfolioEnv
from stable_baselines3 import SAC

# === UI Title ===
st.title("üìä Portfolio Optimization Dashboard")
st.write("Combine Stock, Crypto, and ETF agents with a Meta-Agent for optimal allocations.")

# === User Inputs ===
amount = st.number_input("üí∞ Total Investment Amount ($)", min_value=1000, value=10000, step=500)
risk = st.slider("‚ö†Ô∏è Risk Appetite (0 = Low, 1 = High)", 0.0, 1.0, 0.5, 0.05)
duration = st.number_input("üìÜ Investment Duration (days)", min_value=1, value=180, step=10)

if st.button("üöÄ Optimize Portfolio"):
    # === Get agent portfolios ===
    mu_stock, cov_stock, w_stock = get_agent_portfolio(ppo_stock, env_stock)
    mu_crypto, cov_crypto, w_crypto = get_agent_portfolio(ppo_crypto, env_crypto)
    mu_etf, cov_etf, w_etf = get_agent_portfolio(ppo_etf, env_etf)

# === Meta Agent Environment ===
    meta_env = MetaPortfolioEnv(mu_all, cov_all, amount, risk, duration)
    meta_model = SAC("MlpPolicy", meta_env, verbose=0)
    meta_model.learn(total_timesteps=2000)

    obs = meta_env.reset()
    action, _ = meta_model.predict(obs)
    weights = np.clip(action, 0, 1)
    weights /= weights.sum()

# === Allocation Calculations ===
    daily_return = np.dot(weights, mu_all)
    yearly_return = (1 + daily_return) ** 252 - 1
    valuation = amount * ((1 + daily_return) ** duration)
    profit = valuation - amount
    allocations = weights * amount

    # === Combine Tickers ===
    all_tickers = tickers_stock + tickers_crypto + tickers_etf
    df_alloc = pd.DataFrame({
        "Ticker": all_tickers,
        "Allocation ($)": allocations,
        "Weight (%)": weights * 100
    })

# === Display Metrics ===
    st.subheader("üìà Portfolio Summary")
    st.metric("Projected Valuation", f"${valuation:,.2f}")
    st.metric("Projected Profit", f"${profit:,.2f}")
    st.metric("Estimated Yearly Return", f"{yearly_return*100:.2f}%")

    # === Display Table ===
    st.subheader("üìã Asset Allocation")
    st.dataframe(df_alloc.style.format({"Allocation ($)": "${:,.2f}", "Weight (%)": "{:.2f}%"}))

    # === Pie Chart ===
    fig1, ax1 = plt.subplots()
    ax1.pie(weights, labels=all_tickers, autopct='%1.1f%%', startangle=90)
    ax1.axis('equal')
    st.pyplot(fig1)

# === Projected Growth Chart ===
    st.subheader("üìä Projected Portfolio Growth")
    days = np.arange(0, duration + 1)
    values = amount * ((1 + daily_return) ** days)
    fig2, ax2 = plt.subplots()
    ax2.plot(days, values, color='green')
    ax2.set_xlabel("Days")
    ax2.set_ylabel("Portfolio Value ($)")
    st.pyplot(fig2)

# === Download CSV ===
    csv = df_alloc.to_csv(index=False)
    st.download_button("üì• Download Allocation as CSV", csv, "portfolio_allocation.csv", "text/csv")